#
# This file is used to declare the list of libraries
# which are used as dependencies in the project.
# See https://docs.gradle.org/7.4.2/userguide/platforms.html#sub:central-declaration-of-dependencies
#
# For Micronaut, we have 3 kinds of dependencies:
#   - managed dependencies, which are exposed to consumers via a BOM (or version catalog)
#   - managed BOMs, which are imported into the BOM that we generate
#   - all other dependencies, which are implementation details
#
# If a library needs to appear in the BOM of the project, then it must be
# declared with the "managed-" prefix.
# If a BOM needs to be imported in the BOM of the project, then it must be
# declared with the "boms-" prefix.
# Both managed dependencies and BOMs need to have their version declared via
# a managed version (a version which alias starts with "managed-"

[versions]
micronaut = "4.7.3"
micronaut-platform = "4.6.3"
micronaut-docs = "2.0.0"
micronaut-mongodb = "5.4.0"
micronaut-neo4j = "6.8.0"
micronaut-serde = "2.12.0"
micronaut-sql = "6.0.0"
micronaut-opensearch = "1.3.0"
micronaut-elasticsearch = "5.7.0"
micronaut-redis = "6.6.1"
micronaut-test = "4.6.0"
micronaut-test-resources = "2.6.2"
micronaut-logging = "1.5.0"
micronaut-gradle-plugin = "4.4.4"
micronaut-sourcegen = "1.4.1"
groovy = "4.0.23"
spock = "2.3-groovy-4.0"
awaitility = "4.2.2"

# Managed versions appear in the BOM
managed-langchain4j = "0.35.0"

[libraries]
micronaut-core = { module = 'io.micronaut:micronaut-core-bom', version.ref = 'micronaut'  }
micronaut-redis = { module = 'io.micronaut.redis:micronaut-redis-bom', version.ref = 'micronaut-redis' }
micronaut-mongodb = { module = 'io.micronaut.mongodb:micronaut-mongo-bom', version.ref = 'micronaut-mongodb' }
micronaut-opensearch = { module = 'io.micronaut.opensearch:micronaut-opensearch-bom', version.ref = 'micronaut-opensearch' }
micronaut-elasticsearch = { module = 'io.micronaut.elasticsearch:micronaut-elasticsearch-bom', version.ref = 'micronaut-elasticsearch' }
micronaut-neo4j = { module = 'io.micronaut.neo4j:micronaut-neo4j-bom', version.ref = 'micronaut-neo4j' }
micronaut-logging = { module = 'io.micronaut.logging:micronaut-logging-bom', version.ref = 'micronaut-logging' }
micronaut-serde = { module = 'io.micronaut.serde:micronaut-serde-bom', version.ref = 'micronaut-serde' }
micronaut-sql = { module = 'io.micronaut.sql:micronaut-sql-bom', version.ref = 'micronaut-sql' }
micronaut-sourcegen = { module = 'io.micronaut.sourcegen:micronaut-sourcegen-bom', version.ref = 'micronaut-sourcegen' }
micronaut-test-resources = { module = 'io.micronaut.testresources:micronaut-test-resources-bom', version.ref = 'micronaut-test-resources' }
langchain4j = { module = 'dev.langchain4j:langchain4j', version.ref = "managed-langchain4j" }
langchain4j-jlama = { module = 'dev.langchain4j:langchain4j-jlama', version.ref = "managed-langchain4j" }
langchain4j-ollama = { module = 'dev.langchain4j:langchain4j-ollama', version.ref = "managed-langchain4j" }
langchain4j-bedrock = { module = 'dev.langchain4j:langchain4j-bedrock', version.ref = "managed-langchain4j" }
langchain4j-anthropic = { module = 'dev.langchain4j:langchain4j-anthropic', version.ref = "managed-langchain4j" }
langchain4j-hugging-face = { module = 'dev.langchain4j:langchain4j-hugging-face', version.ref = "managed-langchain4j" }
langchain4j-vertex-ai-gemini = { module = 'dev.langchain4j:langchain4j-vertex-ai-gemini', version.ref = "managed-langchain4j" }
langchain4j-vertex-ai = { module = 'dev.langchain4j:langchain4j-vertex-ai', version.ref = "managed-langchain4j" }
langchain4j-mistral-ai = { module = 'dev.langchain4j:langchain4j-mistral-ai', version.ref = "managed-langchain4j" }
langchain4j-open-ai = { module = 'dev.langchain4j:langchain4j-open-ai', version.ref = "managed-langchain4j" }
langchain4j-azure-open-ai = { module = 'dev.langchain4j:langchain4j-azure-open-ai', version.ref = "managed-langchain4j" }
langchain4j-redis = { module = 'dev.langchain4j:langchain4j-redis', version.ref = "managed-langchain4j" }
langchain4j-oracle = { module = 'dev.langchain4j:langchain4j-oracle', version.ref = "managed-langchain4j" }
langchain4j-mongodb-atlas = { module = 'dev.langchain4j:langchain4j-mongodb-atlas', version.ref = "managed-langchain4j" }
langchain4j-neo4j = { module = 'dev.langchain4j:langchain4j-neo4j', version.ref = "managed-langchain4j" }
langchain4j-opensearch = { module = 'dev.langchain4j:langchain4j-opensearch', version.ref = "managed-langchain4j" }
langchain4j-elasticsearch = { module = 'dev.langchain4j:langchain4j-elasticsearch', version.ref = "managed-langchain4j" }
langchain4j-pgvector = { module = 'dev.langchain4j:langchain4j-pgvector', version.ref = "managed-langchain4j" }
langchain4j-qdrant = { module = 'dev.langchain4j:langchain4j-qdrant', version.ref = "managed-langchain4j" }
langchain4j-google-ai-gemini = { module = 'dev.langchain4j:langchain4j-google-ai-gemini', version.ref = "managed-langchain4j" }

langchain4j-embeddings-all-minilm-l6-v2 = { module = 'dev.langchain4j:langchain4j-embeddings-all-minilm-l6-v2', version.ref = "managed-langchain4j" }
junit-platform-engine = { module = "org.junit.platform:junit-platform-suite-engine" }
awaitility = { module = 'org.awaitility:awaitility', version.ref = "awaitility" }

# BOMs
boms-langchain4j = { module = "dev.langchain4j:langchain4j-bom", version.ref = "managed-langchain4j" }

# Plugins
gradle-micronaut = { module = "io.micronaut.gradle:micronaut-gradle-plugin", version.ref = "micronaut-gradle-plugin" }

[bundles]

[plugins]

